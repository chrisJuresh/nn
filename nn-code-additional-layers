import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import time

tic = time.process_time() 

# CODE FROM https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html START

transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

batch_size = 64

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print(device)

# CODE FROM https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html END

class Block(nn.Module):
    def __init__(self, in_channels, out_channels, num_convs):
        super(Block, self).__init__()
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.mlp = nn.Linear(in_channels, num_convs)

        self.convs = nn.ModuleList([nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1) for _ in range(num_convs)])

    def forward(self, x):
        x_avg = self.avgpool(x).view(x.size(0), -1)
        a = torch.sigmoid(self.mlp(x_avg))
        conv_outputs = [conv(x) for conv in self.convs]
        x = sum(a[:, i].view(-1, 1, 1, 1) * conv_outputs[i] for i in range(len(conv_outputs)))
        return x

class Net(nn.Module):
    def __init__(self, num_blocks, num_convs, num_classes):
        super(Net, self).__init__()
        block_in_channels = 3
        block_out_channels = 16

        self.blocks = nn.ModuleList([Block(block_in_channels if i == 0 else block_out_channels, block_out_channels, num_convs) for i in range(num_blocks)])
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.classifier = nn.Sequential(
            nn.Linear(block_out_channels, 120),
            nn.ReLU(),
            nn.Linear(120, num_classes)
        )

    def forward(self, x):
        for block in self.blocks:
            x = block(x)
        x = self.avgpool(x).view(x.size(0), -1)
        x = self.classifier(x)
        return x

num_blocks = 5
num_convs_per_block = 12
num_classes = 10

net = Net(num_blocks, num_convs_per_block, num_classes).to(device)

# CODE FROM https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html START

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

for epoch in range(2): 
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0):
        inputs, labels = data[0].to(device), data[1].to(device)  # Move data to the device

        optimizer.zero_grad()  # Zero the parameter gradients

        outputs = net(inputs)  # Forward pass
        loss = criterion(outputs, labels)
        loss.backward()  # Backward pass
        optimizer.step()  # Optimize

        running_loss += loss.item()
        if i % 2000 == 1999:    # Print every 2000 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss = 0.0

print('Finished Training')

# Save the trained model
PATH = './cifar_net.pth'
torch.save(net.state_dict(), PATH)

# Test loop (make sure to replace 'testloader' with your DataLoader)
correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data[0].to(device), data[1].to(device)  # Move data to the device
        outputs = net(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f'Accuracy of the network on the test images: {100 * correct // total} %')

# CODE FROM https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html END


toc = time.process_time() 
print(toc - tic)
